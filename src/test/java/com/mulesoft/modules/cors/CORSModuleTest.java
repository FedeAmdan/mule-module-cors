/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.mulesoft.modules.cors;

import org.mule.api.MuleEvent;
import org.mule.api.MuleMessage;
import org.mule.api.transport.PropertyScope;
import org.mule.construct.Flow;
import org.mule.tck.FunctionalTestCase;
import org.mule.tck.AbstractMuleTestCase;

import org.junit.Test;

import java.util.HashMap;

public class CORSModuleTest extends FunctionalTestCase
{
    @Override
    protected String getConfigResources()
    {
        return "mule-config.xml";
    }

    @Test
    public void testFlow() throws Exception {
        HashMap<String, Object> headers = new HashMap<String, Object>();

        headers.put(Constants.ORIGIN, "http://localhost:8081");
        headers.put(Constants.REQUEST_METHOD, "GET");

        headers.put("http.method", "GET");

        runFlowAndExpect("testFlow", "Another string", headers);
    }

    /**
    * Run the flow specified by name and assert equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param headers the input headers
    */
    protected <T> void runFlowAndExpect(String flowName, T expect, HashMap<String, Object> headers) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(null);

        MuleMessage msg = event.getMessage();

        if (headers != null) {
            for(String key : headers.keySet())  {
                msg.setProperty(key, headers.get(key), PropertyScope.INBOUND);
            }
        }

        MuleEvent responseEvent = flow.process(event);


        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
    * Run the flow specified by name using the specified payload and assert
    * equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param payload The payload of the input event
    */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) AbstractMuleTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
